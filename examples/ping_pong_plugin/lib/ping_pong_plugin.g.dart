// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'ping_pong_plugin.dart';

// **************************************************************************
// FlutterPluginGenerator
// **************************************************************************

/// **************************************************************************
/// This code is autogenerated for you by the flutter_plugin_generator package.
///
/// For all inquiry, please read the documentation or file an issue:
/// Project Github : https://github.com/BugsBunnyBR/plugin_gen.flutter/
///
/// Annotations :https://github.com/BugsBunnyBR/plugin_gen.flutter/tree/master/flutter_plugin_annotations
/// Generator : https://github.com/BugsBunnyBR/plugin_gen.flutter/tree/master/flutter_plugin_generator
///
/// This file can be recreated running the command below in the plugin directory.
/// ```
///  flutter pub run build_runner build --delete-conflicting-outputs
/// ```
/// **************************************************************************

class _$PingPongPlugin extends PingPongPlugin {
  final MethodChannel _methodChannel = const MethodChannel('ping_pong_plugin');

  _$PingPongPlugin() : super();

  @override
  Future<void> ping() async {
    final result = await _methodChannel.invokeMethod<void>('ping');

    return result;
  }

  @override
  Future<String> ping2() async {
    final result = await _methodChannel.invokeMethod<String>('ping2');

    return result;
  }

  @override
  void listen(Future<void> Function(String) pong) {
    if (pong == null) {
      _methodChannel.setMethodCallHandler(null);
    } else {
      _methodChannel.setMethodCallHandler((call) async {
        if (call.method == 'pong') {
          final arguments = call.arguments;
          final result = await pong(arguments);
          return result;
        }

        return null;
      });
    }
  }
}
